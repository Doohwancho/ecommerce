server:
  port: ${SERVER_PORT:8080}
  #  port: 8081
  servlet:
    session:
      timeout: 30m  # 30 minutes
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    platform: mysql
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${RDS_ENDPOINT}:${RDS_PORT:3306}/${RDS_DATABASE}?serverTimezone=Asia/Seoul #for local development
    #    url: jdbc:mysql://mysql:3306/ecommerce-database?serverTimezone=Asia/Seoul #for docker
    username: ${RDS_USERNAME:admin}
    #    password: root #mysql로 접속시 root유저의 비밀번호 또한 root로 설정함.
    password: ${RDS_PASSWORD:adminPassword} #local에서 접속시엔 root user's password is null
  jpa:
    database-platform: org.hibernate.dialect.MySQL5Dialect
    hibernate:
      ddl_auto: update
      # 1. none: no action will be taken. safest for producion
      # 2. update: Hibernate will update the schema to reflect the entity classes. If tables or columns are missing in the database, Hibernate will add them. However, it will not remove any tables or columns that are no longer used in the entity classes. This option can be convenient during development but may pose risks in a production environment due to unintended changes
      # 3. create: Hibernate will create the database schema afresh, destroying any existing data. This option is suitable for initial development or testing when starting with a clean slate
      # 4. validate: Hibernate will validate that the tables and columns in the database match the mappings in the entity classes. If there are discrepancies, the application will not start until they are resolved
    properties.hibernate:
      format_sql: false
      show-sql: false
      #      generate_statistics: true
      open-in-view: false # TODO - OIV 자세히 알아보기. log level: WARNING - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering.
      default_batch_fetch_size: 1000
  batch:
    initialize-schema: always
    job:
      enabled: false #true로 하면 @Bean으로 등록된 cron batch steps들이 시작과 동시에 자동 실행되니까 false로 꺼둔다.
#  redis:
#    host: ${REDIS_ENDPOINT}
#    port: ${REDIS_PORT:6379}
#  session:
#    store-type: redis
#    timeout: 30m

logging:
  level:
    #    root: DEBUG
    org:
      hibernate:
        SQL: debug
        type: trace
      springframework:
        security: DEBUG
        web:
          filter:
            CommonsRequestLoggingFilter: DEBUG

management:
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
  endpoints:
    web:
      exposure:
        include: '*'
  metrics:
    export:
      prometheus:
        enabled: true

