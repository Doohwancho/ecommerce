openapi: 3.0.3
info:
  title: User Management API
  version: 1.0.0
  description: API for managing users, authorities, and user-authorities.
paths:
  /register:
    post:
      tags:
        - User
      summary: register a user
      description: Returns the Result of Register Attempt
      operationId: registerRoleUser
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterPostDTO'
      responses:
        201:
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponseDTO'
        400:
          description: Bad Request
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred."
#  /login: #수동 로그인 말고 spring security에서 제공하는 방법으로 바꿈
#    post:
#      tags:
#        - User
#      summary: Authenticate a user
#      description: Authenticates the user and returns a login status message.
#      operationId: loginUser
#      requestBody:
#        description: User credentials for authentication
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/LoginPostDTO'
#          application/x-www-form-urlencoded:
#            schema:
#              $ref: '#/components/schemas/LoginPostDTO'
#      responses:
#        200:
#          description: Login successful
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  message:
#                    type: string
#                    example: "Logged in successfully"
#        401:
#          description: Unauthorized
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  message:
#                    type: string
#                    example: "Invalid username or password"
#        default:
#          description: Unexpected error
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  message:
#                    type: string
#                    example: "An unexpected error occurred."
  /products:
    get:
      summary: Get all products
      tags:
        - Product
      operationId: getAllProducts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDTO'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new product
      tags:
        - Product
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateDTO'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{productId}:
    get:
      summary: Get a specific product by ID
      tags:
        - Product
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a product by ID
      tags:
        - Product
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDTO'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a product by ID
      tags:
        - Product
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Product deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders:
    get:
      summary: Get all orders
      tags:
        - Order
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDTO'
    post:
      summary: Create a new order
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDTO'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
  /orders/{orderId}:
    get:
      summary: Get a specific order by ID
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
    put:
      summary: Update an order by ID
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDTO'
      responses:
        '200':
          description: Order updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
    delete:
      summary: Delete an order by ID
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Order deleted
components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    RegisterPostDTO:
      type: object
      properties:
        userId:
          type: string
          description: Unique user identifier.
        email:
          type: string
          description: Unique email address.
        name:
          type: string
        password:
          type: string
        address:
          type: object
          properties:
            street:
              type: string
              description: Street name and number.
            city:
              type: string
              description: City name.
            state:
              type: string
              description: State or province name.
            country:
              type: string
              description: Country name.
            zipCode:
              type: string
              description: Postal or ZIP code.
    RegisterResponseDTO:
      type: object
      properties:
        message:
          type: string
          example: "Registration successful"
#    LoginPostDTO:
#      type: object
#      properties:
#        userId:
#          type: string
#          description: Unique user identifier.
#        password:
#          type: string
#          description: User's password.
    ProductCreateDTO:
      type: object
      properties:
        PRODUCT_ID:
          type: integer
          format: int64
        NAME:
          type: string
        DESCRIPTION:
          type: string
        CATEGORY_ID:
          type: integer
      required:
        - PRODUCT_ID
    ProductDTO:
      type: object
      properties:
        PRODUCT_ID:
          type: integer
          format: int64
        NAME:
          type: string
        DESCRIPTION:
          type: string
        RATING:
          type: number
        RATING_COUNT:
          type: integer
        CATEGORY_ID:
          type: integer
      required:
        - PRODUCT_ID
    OrderDTO:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
          readOnly: true
        orderDate:
          type: string
          format: date-time
        orderStatus:
          type: string
        memberId:
          type: integer
        paymentId:
          type: string
        deliveryId:
          type: string
      required:
        - orderDate
        - orderStatus
        - memberId