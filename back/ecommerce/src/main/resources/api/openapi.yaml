openapi: 3.0.3
info:
  title: User Management API
  version: 1.0.0
  description: API for managing users, authorities, and user-authorities.
paths:
  /register:
    post:
      tags:
        - User
      summary: return whether or not register succeeded
      description: Returns the Result of Register Attempt
      operationId: registerUser
      parameters: #TODO - parameters to schema
        - name: userId
          in: query
          description: Unique user identifier.
          required: true
          schema:
            type: string
        - name: email
          in: query
          description: Unique email address.
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: User's name.
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: User's password.
          required: true
          schema:
            type: string
      responses:
        201:
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration successful"
        400:
          description: Bad Request
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred."
  /login:
    post:
      tags:
        - User
      summary: Authenticate and login a user
      description: Authenticates the user and returns a login status message.
      operationId: loginUser
      requestBody:
        description: User credentials for authentication
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginPostDTO'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginPostDTO'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged in successfully"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid username or password"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred."
  /products:
    get:
      summary: Get all products
      tags:
        - Product
      operationId: getAllProducts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDTO'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new product
      tags:
        - Product
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDTO'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{productId}:
    get:
      summary: Get a specific product by ID
      tags:
        - Product
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a product by ID
      tags:
        - Product
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDTO'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a product by ID
      tags:
        - Product
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Product deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    RegisterPostDTO:
      type: object
      properties:
        userId:
          type: string
          description: Unique user identifier.
        email:
          type: string
          description: Unique email address.
        name:
          type: string
        password:
          type: string
    LoginPostDTO:
      type: object
      properties:
        userId:
          type: string
          description: Unique user identifier.
        password:
          type: string
          description: User's password.
    ProductDTO:
      type: object
      properties:
        PRODUCT_ID:
          type: integer
          format: int64
        NAME:
          type: string
        DESCRIPTION:
          type: string
        RATING:
          type: number
        RATING_COUNT:
          type: integer
        CATEGORY_ID:
          type: integer
      required:
        - PRODUCT_ID