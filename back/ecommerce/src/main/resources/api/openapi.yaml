openapi: 3.0.3
##############################################
#  주의점                                      #
##############################################
# 1. components: schemas: 에 object 이름을 정의할 때, 엔티티 이름이나 도메인 객체 이름과 겹치면, mapstruct에 걸리거나, 도메인 객체와 헤깔릴 수 있으니, 맨 뒤에 DTO를 붙여준다.
# 2. components: schemas: 에 object 이름을 정의할 때, 객체 이름이 복수면, mapstruct의 복수객체 전환시 장애가 있으니, 단수로 한다.externalDocs:
# 3. components: schemas: 에 object를 정의할 때, field 이름에 underscore ('_') 가 들어가면,
#    openapi-codegen이 object를 만들 때, getter에 '_'가 버려지기 때문에,(ex. PRODUCT_ID -> getPRODUCTID() 로 됨)
#    Mapper library를 쓸 때 에러난다. 따라서 _를 쓰지 말고, camel case를 쓰도록 하자. (ex. userAddress)

info:
  title: User Management API
  version: 1.0.0
  description: API for managing users, authorities, and user-authorities.
paths:
  /register:
    post:
      tags:
        - User
      summary: register a user
      description: Returns the Result of Register Attempt
      operationId: registerRoleUser
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterPostDTO'
      responses:
        201:
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponseDTO'
        400:
          description: Bad Request
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred."
#  /login: #수동 로그인 말고 spring security에서 제공하는 방법으로 바꿈
#    post:
#      tags:
#        - User
#      summary: Authenticate a user
#      description: Authenticates the user and returns a login status message.
#      operationId: loginUser
#      requestBody:
#        description: User credentials for authentication
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/LoginPostDTO'
#          application/x-www-form-urlencoded:
#            schema:
#              $ref: '#/components/schemas/LoginPostDTO'
#      responses:
#        200:
#          description: Login successful
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  message:
#                    type: string
#                    example: "Logged in successfully"
#        401:
#          description: Unauthorized
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  message:
#                    type: string
#                    example: "Invalid username or password"
#        default:
#          description: Unexpected error
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  message:
#                    type: string
#                    example: "An unexpected error occurred."
  /products:
    get:
      summary: Get all products
      tags:
        - Product
      operationId: getAllProducts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDTO'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    post:
      summary: Create a new product
      tags:
        - Product
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateDTO'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /products/{productId}:
    get:
      summary: Get product details by product ID
      operationId: getProductDetailDTOsById
      tags:
        - product
      parameters:
        - name: productId
          in: path
          required: true
          description: The ID of the product to retrieve.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: An array of product objects along with related details.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDetailDTO'
        '404':
          description: Product not found
#    get:
#      summary: Get a specific product by ID
#      tags:
#        - Product
#      operationId: getProductById
#      parameters:
#        - name: productId
#          in: path
#          required: true
#          schema:
#            type: integer
#            format: int64
#      responses:
#        '200':
#          description: Successful response
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/ProductDTO'
#        default:
#          description: Unexpected error
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/ErrorDTO'
    put:
      summary: Update a product by ID
      tags:
        - Product
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDTO'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    delete:
      summary: Delete a product by ID
      tags:
        - Product
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Product deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /products/category/{categoryId}:
    get:
      tags:
        - Product
      summary: Get products by category
      description: Returns a list of products belonging to a specific category
      operationId: getProductsByCategory
      parameters:
        - name: categoryId
          in: path
          required: true
          description: ID of the category to filter by
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponseDTO'
        '204':
          description: No content, no products found for the category
        '400':
          description: Bad request, invalid category ID
        '404':
          description: Not found, category does not exist
  /orders:
    get:
      summary: Get all orders
      tags:
        - Order
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDTO'
    post:
      summary: Create a new order
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDTO'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
  /orders/{orderId}:
    get:
      summary: Get a specific order by ID
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
    put:
      summary: Update an order by ID
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDTO'
      responses:
        '200':
          description: Order updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
    delete:
      summary: Delete an order by ID
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Order deleted
components:
  schemas:
    ErrorDTO:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    RegisterPostDTO:
      type: object
      properties:
        username:
          type: string
          description: Unique user identifier.
        email:
          type: string
          description: Unique email address.
        name:
          type: string
        password:
          type: string
        address:
          type: object
          properties:
            street:
              type: string
              description: Street name and number.
            city:
              type: string
              description: City name.
            state:
              type: string
              description: State or province name.
            country:
              type: string
              description: Country name.
            zipCode:
              type: string
              description: Postal or ZIP code.
    RegisterResponseDTO:
      type: object
      properties:
        message:
          type: string
          example: "Registration successful"
#    LoginPostDTO:
#      type: object
#      properties:
#        username:
#          type: string
#          description: Unique user identifier.
#        password:
#          type: string
#          description: User's password.
    ProductCreateDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        categoryId:
          type: integer
      required:
        - productId
    ProductDTO:
      type: object
      properties:
        productId:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        rating:
          type: number
        ratingCount:
          type: integer
        categoryId:
          type: integer
      required:
        - PRODUCT_ID
    ProductListResponseDTO:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductDTO'
      required:
        - products
    ProductDetailDTO:
      type: object
      properties:
        productId:
          type: integer
          format: int64
          description: Unique identifier of the product
        name:
          type: string
          description: Name of the product
        description:
          type: string
          description: Description of the product
        rating:
          type: number
          format: double
          description: Average rating of the product
        ratingCount:
          type: integer
          format: int32
          description: Count of ratings received
        quantity:
          type: integer
          format: int32
          description: Available quantity of the product
        price:
          type: number
          format: double
          description: Price of the product
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/DiscountDTO'
        categoryId:
          type: integer
          format: int64
          description: Identifier of the category to which the product belongs
        categoryCode:
          type: string
          description: Code of the category
        categoryName:
          type: string
          description: Name of the category
        optionName:
          type: string
          description: Name of the product option
        optionVariationName:
          type: string
          description: Name of the product option variation
    DiscountDTO:
      type: object
      properties:
        discountId:
          type: integer
          format: int64
          description: Unique identifier of the discount
        discountType:
          type: string
          description: Type of the discount
        discountValue:
          type: number
          format: double
          description: Value of the discount
        startDate:
          type: string
          format: date-time #date == LocalDate in java, date-time == OffsetDateTime in java
          description: Start date of the discount
        endDate:
          type: string
          format: date-time #date == LocalDate in java, date-time == OffsetDateTime in java
          description: End date of the discount
    OrderDTO:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
          readOnly: true
        orderDate:
          type: string
          format: date-time #date == LocalDate in java, date-time == OffsetDateTime in java
        orderStatus:
          type: string
        memberId:
          type: integer
        paymentId:
          type: string
        deliveryId:
          type: string
      required:
        - orderDate
        - orderStatus
        - memberId