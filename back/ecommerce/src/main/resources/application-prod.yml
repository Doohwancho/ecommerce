server:
  port: ${SERVER_PORT:8080}
  #  port: 8081
  servlet:
    session:
      timeout: 30m  # 30 minutes
spring:
  profiles: prod
  datasource:
    platform: mysql
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://my-rds-1.cjnqczcskjzp.ap-northeast-2.rds.amazonaws.com:3306/aws_ecommerce_database?serverTimezone=Asia/Seoul #for local development
    #    url: jdbc:mysql://mysql:3306/ecommerce-database?serverTimezone=Asia/Seoul #for docker
    username: awsrdsroot
    #    password: root #mysql로 접속시 root유저의 비밀번호 또한 root로 설정함.
    password: awsrdspw #local에서 접속시엔 root user's password is null
  jpa:
    database-platform: org.hibernate.dialect.MySQL5Dialect
    hibernate:
      ddl_auto: create
    properties.hibernate:
      format_sql: true
      show-sql: true
      #      generate_statistics: true
      open-in-view: false # TODO - OIV 자세히 알아보기. log level: WARNING - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering.
      default_batch_fetch_size: 1000
  batch:
    initialize-schema: always
    job:
      enabled: false #true로 하면 @Bean으로 등록된 cron batch steps들이 시작과 동시에 자동 실행되니까 false로 꺼둔다.
  redis:
    host: my-redis-cluster-01.4mu9pu.clustercfg.apn2.cache.amazonaws.com #for aws
#    host: localhost #for local development
#    host: redis #for docker
    port: 6379
  session:
    store-type: redis
    timeout: 30m

logging.level:
  org.hibernate.SQL: debug
  org.hibernate.type: trace
  org.springframework.security: DEBUG


