plugins {
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'org.hidetake.swagger.generator' version '2.18.2'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'idea'
}

group = 'com.cho.ecommerce'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
//for jqwik
ext.junitJupiterVersion = '5.9.3'
ext.jqwikVersion = '1.8.1'

dependencies {

    // OpenAPI Starts
    swaggerCodegen 'org.openapitools:openapi-generator-cli:4.3.1'
    //compile 'io.swagger.core.v3:swagger-annotations:2.1.5'
    compileOnly 'io.swagger:swagger-annotations:1.6.2'
    compileOnly 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.openapitools:jackson-databind-nullable:0.2.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
//    implementation 'org.springframework.boot:spring-boot-starter-hateoas' //TODO - hateoas
    // OpenAPI Ends

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.querydsl:querydsl-jpa'


    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'org.thymeleaf:thymeleaf-spring5'

    runtimeOnly 'com.h2database:h2'

    implementation 'net.datafaker:datafaker:1.9.0' //for jdk1.8
    implementation 'mysql:mysql-connector-java:8.0.23'

    implementation 'com.google.guava:guava:31.1-jre' //DatabaseCleanup.java 때문에 필요.

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'


    compileOnly 'org.projectlombok:lombok:1.18.28'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'

    annotationProcessor 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.junit.platform:junit-platform-launcher:1.5.2"
    testImplementation('org.junit.jupiter:junit-jupiter:5.9.2')
    testImplementation "net.jqwik:jqwik:${jqwikVersion}" //for Property Based Testing
}



test {
    jvmArgs '--enable-preview'
    //start of jqwik config
    useJUnitPlatform {
         includeEngines 'jqwik', 'junit-jupiter', 'junit-vintage'

        // includeTags 'fast', 'medium'
        // excludeTags 'slow'
    }

    include '**/*Properties.class'
    include '**/*Test.class'
    include '**/*Tests.class'

    environment "MY_ENV_VAR", "true"
    //end of jqwik config
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

//openapi config
swaggerSources {
//    def typeMappings = 'URI=URI, BigDecimal=BigDecimal, EntityModel=EntityModel'
//    def importMappings = 'URI=java.net.URI, BigDecimal=java.math.BigDecimal, EntityModel=org.springframework.hateoas.EntityModel'
    ecommerce {
        def apiYaml = "${rootDir}/src/main/resources/api/openapi.yaml"
        def configJson = "${rootDir}/src/main/resources/api/config.json"
        inputFile = file(apiYaml)
        def ignoreFile = file("${rootDir}/src/main/resources/api/.openapi-generator-ignore")
        code {
            language = 'spring'
            configFile = file(configJson)
            rawOptions = ['--ignore-file-override', ignoreFile] as List<String>
            components = [models: true, apis: true, supportingFiles: 'ApiUtil.java']
            outputDir = file("$buildDir/generated/swagger") // Set your output directory here
            //templateDir = file("${rootDir}/src/main/resources/templates")
            //dependsOn validation // Should be uncommented once plugin starts supporting OA 3 validation
        }
    }
}

sourceSets.main.java.srcDir "${swaggerSources.ecommerce.code.outputDir}"
sourceSets.main.resources.srcDir "${swaggerSources.ecommerce.code.outputDir}"



//query dsl config
def querydslDir = "$buildDir/generated/querydsl" //TODO - build 하면, build/generated/querydsl은 없고, build/classes/java/main/org/example/jpashop/ 에 QClass생김..

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

compileTestJava.options.compilerArgs += '-parameters' //for jqwik
processResources.mustRunAfter swaggerSources.ecommerce.code
compileQuerydsl.mustRunAfter swaggerSources.ecommerce.code
compileJava.dependsOn swaggerSources.ecommerce.code, compileQuerydsl