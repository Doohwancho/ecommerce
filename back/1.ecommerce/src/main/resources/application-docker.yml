server:
  port: ${SERVER_PORT:8080}
  #  port: 8081
  servlet:
    session:
      timeout: 30m  # 30 minutes
spring:
  config:
    activate:
      on-profile: docker
    #confidential이 적힌 파일 import.
    #.gitignore에는 제외되었지만,
    #spring: mail: username:, password: 가 적힌 application-secret.yml을 적고, import한다.
    import: application-secret.yml
  datasource:
    platform: mysql
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://mysql:3306/ecommerce?autoReconnect=true&serverTimezone=Asia/Seoul&rewriteBatchedStatements=true
    username: root #user123
    password: admin123 #user123
  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl_auto: create
    properties.hibernate:
      dialect: org.hibernate.dialect.MySQL8Dialect
      format_sql: true
      show-sql: true
      #      generate_statistics: true
      open-in-view: false # TODO - OIV 자세히 알아보기. log level: WARNING - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering.
      default_batch_fetch_size: 1000
      jdbc:
        batch_size: 1000
  batch:
    initialize-schema: always
    job:
      enabled: false #true로 하면 @Bean으로 등록된 cron batch steps들이 시작과 동시에 자동 실행되니까 false로 꺼둔다.
  redis:
    host: redis
    port: 6379
  session:
    store-type: redis
    timeout: 60m
  mail:
    host: smtp.gmail.com
    port: 587
    #    username: ${YOUR_EMAIL_ADDRESS}
    #    password: ${16자리 google account's app password}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  task:
    scheduling:
      pool:
        size: 5

app:
  product:
    max-id: 1000

  verification:
  code:
    length: 6
    expiry-minutes: 5
    max-attempts: 3
  rate-limit:
    requests-per-second: 1


logging:
  level:
    root: INFO
    org:
      hibernate:
        SQL: INFO
        type: TRACE
      springframework:
        security: INFO
        web:
          filter:
            CommonsRequestLoggingFilter: INFO

management:
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
  endpoints:
    web:
      exposure:
        include: '*'
  metrics:
    export:
      prometheus:
        enabled: true


