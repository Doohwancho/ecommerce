plugins {
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'org.hidetake.swagger.generator' version '2.18.2'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'idea'
    id 'me.champeau.gradle.jmh' version '0.5.3'
}

group = 'com.cho.ecommerce'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

//for jqwik
ext.junitJupiterVersion = '5.9.3'
ext.jqwikVersion = '1.8.1'

//for jackson's OffsetDateTime formatter
ext.jacksonVersion = '2.13.5'


dependencies {
    // jackson-data formatter에서 JSR310 라이브러리가 (Java 8 Date/Time) 지원
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    /********************
     *  OpenAPI Starts
     **/
    swaggerCodegen 'org.openapitools:openapi-generator-cli:4.3.1'
    //compile 'io.swagger.core.v3:swagger-annotations:2.1.5'
    compileOnly 'io.swagger:swagger-annotations:1.6.2'
    compileOnly 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.openapitools:jackson-databind-nullable:0.2.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'

//    implementation 'org.springframework.boot:spring-boot-starter-hateoas' //TODO - hateoas 적용하기
    /*********** OpenAPI Ends ******************/


    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'

    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.thymeleaf:thymeleaf-spring5'

    runtimeOnly 'com.h2database:h2'

    implementation 'net.datafaker:datafaker:1.9.0' //for jdk1.8
    implementation 'mysql:mysql-connector-java:8.0.29' //8.0.29

    implementation 'com.google.guava:guava:31.1-jre' //DatabaseCleanup.java 때문에 필요.

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'

    compileOnly 'org.projectlombok:lombok:1.18.28'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'

    annotationProcessor 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation "org.junit.platform:junit-platform-launcher:1.5.2"
    testImplementation('org.junit.jupiter:junit-jupiter:5.9.2')
    testImplementation "net.jqwik:jqwik:${jqwikVersion}" //for Property Based Testing

    //jmh
    jmh 'org.openjdk.jmh:jmh-core:1.21'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.21'
    jmh 'org.springframework:spring-context'
    jmh 'org.springframework.boot:spring-boot-starter-data-redis'
    jmh 'io.lettuce:lettuce-core'
    jmh 'org.projectlombok:lombok'
    jmhAnnotationProcessor 'org.projectlombok:lombok'
}


test {
    jvmArgs '--enable-preview'

    //start of jqwik config
    useJUnitPlatform {
        includeEngines 'jqwik', 'junit-jupiter', 'junit-vintage'

        // includeTags 'fast', 'medium'
        // excludeTags 'slow'
    }

    include '**/*Properties.class'
    include '**/*Test.class'
    include '**/*Tests.class'

    exclude '**/*Benchmark*'

    environment "MY_ENV_VAR", "true"
    //end of jqwik config
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

/***************************
 * openapi config
 */
swaggerSources {
//    def typeMappings = 'URI=URI, BigDecimal=BigDecimal, EntityModel=EntityModel'
//    def importMappings = 'URI=java.net.URI, BigDecimal=java.math.BigDecimal, EntityModel=org.springframework.hateoas.EntityModel'
    ecommerce {
        def apiYaml = "${rootDir}/src/main/resources/api/openapi.yaml"
        def configJson = "${rootDir}/src/main/resources/api/config.json"
        inputFile = file(apiYaml)
        def ignoreFile = file("${rootDir}/src/main/resources/api/.openapi-generator-ignore")
        code {
            language = 'spring'
            configFile = file(configJson)
            rawOptions = ['--ignore-file-override', ignoreFile] as List<String>
            components = [models: true, apis: true, supportingFiles: 'ApiUtil.java']
            outputDir = file("$buildDir/generated/swagger") // Set your output directory here
            //templateDir = file("${rootDir}/src/main/resources/templates")
            //dependsOn validation // Should be uncommented once plugin starts supporting OA 3 validation
        }
    }
}

sourceSets.main.java.srcDir "${swaggerSources.ecommerce.code.outputDir}"
sourceSets.main.resources.srcDir "${swaggerSources.ecommerce.code.outputDir}"


/****************************
 * query dsl config
 */
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

compileTestJava.options.compilerArgs += '-parameters' //for jqwik
processResources.mustRunAfter swaggerSources.ecommerce.code
compileQuerydsl.mustRunAfter swaggerSources.ecommerce.code
compileJava.dependsOn swaggerSources.ecommerce.code, compileQuerydsl


/**********************
 * jmh
 */
jmh {
    jmhVersion = '1.21'
    includeTests = false
    // Allows to include test sources into generate JMH jar, i.e. use it when benchmarks depend on the test classes.
    include = ['.*Benchmark.*']

//    benchmarkMode = ['all']
//    fork = 1
//    warmupIterations = 2
//    iterations = 2
//    threads = 4 //이건 benchmark class마다 총 할당할 쓰레드 수를 정하고, 메서드마다 @GroupThreads() 수로 할당해주자.

    timeUnit = 'ms'

    jvmArgs = [
            //jvm memory 관련
            //WAS 서버의 ec2를 2core, 4GiB RAM + scale_out 한다고 가정,
            //초기 힙 사이즈 (-Xms): 일반적으로 전체 RAM의 25% 정도로 설정 -> 1GiB
            //최대 힙 사이즈 (-Xmx): 일반적으로 전체 RAM의 50-75% 정도로 설정 -> 2.5GiB
            '-Xms1024m',           // 초기 힙 사이즈: 1G
            '-Xmx2560m',           // 최대 힙 사이즈: 2.5G
            '-XX:MaxMetaspaceSize=256m',

            //로깅 설정
            '-Dlogback.configurationFile=jmh-log-config.xml'
    ]
}

//아래 세팅이 있어야 jmh 테스트 시, log-file conflict가 안난다.
//org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':processJmhResources'.
//Caused by: org.gradle.api.InvalidUserCodeException: Entry jmh-log-config.xml is a duplicate but no duplicate handling strategy has been set. Please refer to https://docs.gradle.org/7.5.1/dsl/org.gradle.api.tasks.Copy.html#org.gradle.api.tasks.Copy:duplicatesStrategy for details.
sourceSets {
    jmh {
        java {
            srcDirs = ['src/jmh/java']
        }
        resources {
            srcDirs = ['src/jmh/resources']
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

