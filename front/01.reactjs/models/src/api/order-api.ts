/* tslint:disable */
/* eslint-disable */
/**
 * ecommerce API
 * ecommerce API MVP
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../../base';
// @ts-ignore
import { ErrorResponseDTO } from '../../src/model';
// @ts-ignore
import { OrderDTO } from '../../src/model';
// @ts-ignore
import { OrderItemDetailsResponseDTO } from '../../src/model';
// @ts-ignore
import { OrderSalesStatisticsResponseDTO } from '../../src/model';
/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve statistics for orders including category, product sales.
         * @summary Get order statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMaxSalesProductAndAverageRatingAndTotalSalesPerCategoryDuringSixMonths: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders/statistics/sales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get order item details by username
         * @param {string} username Username to fetch order item details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItemDetailsByUsername: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getOrderItemDetailsByUsername', 'username', username)
            const localVarPath = `/orders/orderItems/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an order by ID
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderIdDelete: async (orderId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('ordersOrderIdDelete', 'orderId', orderId)
            const localVarPath = `/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific order by ID
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderIdGet: async (orderId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('ordersOrderIdGet', 'orderId', orderId)
            const localVarPath = `/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an order by ID
         * @param {number} orderId 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderIdPut: async (orderId: number, orderDTO: OrderDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('ordersOrderIdPut', 'orderId', orderId)
            // verify required parameter 'orderDTO' is not null or undefined
            assertParamExists('ordersOrderIdPut', 'orderDTO', orderDTO)
            const localVarPath = `/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new order
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersPost: async (orderDTO: OrderDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderDTO' is not null or undefined
            assertParamExists('ordersPost', 'orderDTO', orderDTO)
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve statistics for orders including category, product sales.
         * @summary Get order statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMaxSalesProductAndAverageRatingAndTotalSalesPerCategoryDuringSixMonths(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderSalesStatisticsResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMaxSalesProductAndAverageRatingAndTotalSalesPerCategoryDuringSixMonths(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.getMaxSalesProductAndAverageRatingAndTotalSalesPerCategoryDuringSixMonths']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get order item details by username
         * @param {string} username Username to fetch order item details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderItemDetailsByUsername(username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderItemDetailsResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderItemDetailsByUsername(username, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.getOrderItemDetailsByUsername']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get all orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.ordersGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an order by ID
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersOrderIdDelete(orderId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersOrderIdDelete(orderId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.ordersOrderIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get a specific order by ID
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersOrderIdGet(orderId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersOrderIdGet(orderId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.ordersOrderIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update an order by ID
         * @param {number} orderId 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersOrderIdPut(orderId: number, orderDTO: OrderDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersOrderIdPut(orderId, orderDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.ordersOrderIdPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new order
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersPost(orderDTO: OrderDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersPost(orderDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrderApi.ordersPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * Retrieve statistics for orders including category, product sales.
         * @summary Get order statistics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMaxSalesProductAndAverageRatingAndTotalSalesPerCategoryDuringSixMonths(options?: any): AxiosPromise<Array<OrderSalesStatisticsResponseDTO>> {
            return localVarFp.getMaxSalesProductAndAverageRatingAndTotalSalesPerCategoryDuringSixMonths(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get order item details by username
         * @param {string} username Username to fetch order item details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItemDetailsByUsername(username: string, options?: any): AxiosPromise<Array<OrderItemDetailsResponseDTO>> {
            return localVarFp.getOrderItemDetailsByUsername(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersGet(options?: any): AxiosPromise<Array<OrderDTO>> {
            return localVarFp.ordersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an order by ID
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderIdDelete(orderId: number, options?: any): AxiosPromise<void> {
            return localVarFp.ordersOrderIdDelete(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific order by ID
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderIdGet(orderId: number, options?: any): AxiosPromise<OrderDTO> {
            return localVarFp.ordersOrderIdGet(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an order by ID
         * @param {number} orderId 
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderIdPut(orderId: number, orderDTO: OrderDTO, options?: any): AxiosPromise<OrderDTO> {
            return localVarFp.ordersOrderIdPut(orderId, orderDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new order
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersPost(orderDTO: OrderDTO, options?: any): AxiosPromise<OrderDTO> {
            return localVarFp.ordersPost(orderDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApi - interface
 * @export
 * @interface OrderApi
 */
export interface OrderApiInterface {
    /**
     * Retrieve statistics for orders including category, product sales.
     * @summary Get order statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getMaxSalesProductAndAverageRatingAndTotalSalesPerCategoryDuringSixMonths(options?: AxiosRequestConfig): AxiosPromise<Array<OrderSalesStatisticsResponseDTO>>;

    /**
     * 
     * @summary Get order item details by username
     * @param {string} username Username to fetch order item details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getOrderItemDetailsByUsername(username: string, options?: AxiosRequestConfig): AxiosPromise<Array<OrderItemDetailsResponseDTO>>;

    /**
     * 
     * @summary Get all orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    ordersGet(options?: AxiosRequestConfig): AxiosPromise<Array<OrderDTO>>;

    /**
     * 
     * @summary Delete an order by ID
     * @param {number} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    ordersOrderIdDelete(orderId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get a specific order by ID
     * @param {number} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    ordersOrderIdGet(orderId: number, options?: AxiosRequestConfig): AxiosPromise<OrderDTO>;

    /**
     * 
     * @summary Update an order by ID
     * @param {number} orderId 
     * @param {OrderDTO} orderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    ordersOrderIdPut(orderId: number, orderDTO: OrderDTO, options?: AxiosRequestConfig): AxiosPromise<OrderDTO>;

    /**
     * 
     * @summary Create a new order
     * @param {OrderDTO} orderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    ordersPost(orderDTO: OrderDTO, options?: AxiosRequestConfig): AxiosPromise<OrderDTO>;

}

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI implements OrderApiInterface {
    /**
     * Retrieve statistics for orders including category, product sales.
     * @summary Get order statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getMaxSalesProductAndAverageRatingAndTotalSalesPerCategoryDuringSixMonths(options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).getMaxSalesProductAndAverageRatingAndTotalSalesPerCategoryDuringSixMonths(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get order item details by username
     * @param {string} username Username to fetch order item details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getOrderItemDetailsByUsername(username: string, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).getOrderItemDetailsByUsername(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public ordersGet(options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).ordersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an order by ID
     * @param {number} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public ordersOrderIdDelete(orderId: number, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).ordersOrderIdDelete(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific order by ID
     * @param {number} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public ordersOrderIdGet(orderId: number, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).ordersOrderIdGet(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an order by ID
     * @param {number} orderId 
     * @param {OrderDTO} orderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public ordersOrderIdPut(orderId: number, orderDTO: OrderDTO, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).ordersOrderIdPut(orderId, orderDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new order
     * @param {OrderDTO} orderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public ordersPost(orderDTO: OrderDTO, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).ordersPost(orderDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

