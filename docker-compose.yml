version: '3.7'

services:

  redis:
    container_name: 'redis'
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - bridge_network
    restart: on-failure

  mysql:
    container_name: 'mysql'
    image: mysql/mysql-server:8.0.23 # for arm64 m1
    # image: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ecommerce-database
      # MYSQL_ROOT_PASSWORD: admin123
      MYSQL_USER: user123
      MYSQL_PASSWORD: user123
    volumes:
      - ./mysql-data:/var/lib/mysql
    networks:
      - bridge_network
    # restart: on-failure

  ecommerce-app1:
    container_name: 'ecommerce-app1'
    hostname: ecommerce-app1
    build:
      context: ./back/ecommerce
      dockerfile: Dockerfile
    # ports: #backend server port는 외부 접속을 막아둔다. 다만, 개발시에는 편의를 위해 여는 경우도 있다.
      # - "8080:8080" #"HOST_PORT:CONTAINER_PORT"
    environment: 
      - SERVER_PORT=8080
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - bridge_network
    depends_on:
      - redis
      - mysql
    restart: on-failure

  # for testing multiple spring instances sharing single redis for authentication
  # ecommerce-app2:
  #   build:
  #     context: ./back/ecommerce
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8081:8080" #"HOST_PORT:CONTAINER_PORT"
  #   networks:
  #     - bridge_network
  #   environment:
  #     - SERVER_PORT=8081
  #   depends_on:
  #     - redis
  #     - mysql
  #   restart:
  #     on-failure

  nginx:
    container_name: 'nginx'
    restart: always
    build:
      context: ./web-server
      dockerfile: Dockerfile
    ports:
      - "80:80"
    networks:
      - bridge_network
    depends_on:
      - frontend-a
      - ecommerce-app1
    restart: on-failure

  frontend-a:
    container_name: 'frontend-a'
    restart: always
    build:
      context: ./front/ecommerce
      dockerfile: Dockerfile
    networks:
      - bridge_network
    restart: on-failure
  
  prometheus:
    image: prom/prometheus
    container_name: 'prometheus'
    hostname: prometheus
    user: root # allows prometheus to access to localhost's prometheus/prometheus_data directory
    ports:
      - '9090:9090'
    networks:
      - bridge_network
      - monitoring_network
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/prometheus_data:/prometheus-data
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - ecommerce-app1
    restart: on-failure

  grafana:
    image: grafana/grafana-enterprise
    container_name: 'grafana'
    hostname: grafana
    user: '0' # if you are running as root then set it to 0. else find the right id with the id -u command
    networks:
      - monitoring_network
    ports:
      - '3000:3000'
    volumes:
      - ./grafana/conf/provisioning/dashboards/:/usr/share/grafana/conf/provisioning/dashboards/ #주의! - os마다, grafana 버전마다 docker container에서 volume mapping해줘야하는 장소가 달라질 수 있다. 현재 config는 mac m1 기준이다. 
      - ./grafana/conf/provisioning/datasources/:/usr/share/grafana/conf/provisioning/datasources/
      - ./grafana/grafana_data/:/var/lib/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=true
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - ecommerce-app1
      - prometheus
    restart: unless-stopped # on-failure

networks:
  bridge_network: #얘로 frontend, backend, db 같은 네트워크로 묶는 것
    driver: bridge
  monitoring_network: #prometheus, grafana 같은 네트워크로 묶는 것
    driver: bridge
